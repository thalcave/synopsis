#####################################################################
Locking

LOCK TABLES
* A session can release its locks explicitly with UNLOCK TABLES.
* If a session issues a LOCK TABLES statement to acquire a lock while already holding locks,
its existing locks are released implicitly before the new locks are granted.
* If a session begins a transaction (for example, with START TRANSACTION),
an implicit UNLOCK TABLES is performed, which causes existing locks to be released.

If the connection for a client session terminates, whether normally or abnormally,
the server implicitly releases all table locks held by the session (transactional and nontransactional).

-------------------------------------------------------------------------------------------
By default, MySQL runs with autocommit mode enabled. This means that as soon as you execute a statement that updates (modifies) a table, MySQL stores the update on disk to make it permanent.

Beginning a transaction also causes table locks acquired with LOCK TABLES to be released,
as though you had executed UNLOCK TABLES


The correct way to use LOCK TABLES and UNLOCK TABLES with transactional tables, such as InnoDB tables, is to begin a transaction with SET autocommit = 0 (not START TRANSACTION) followed by LOCK TABLES, and to not call UNLOCK TABLES until you commit the transaction explicitly. For example, if you need to write to table t1 and read from table t2, you can do this:
SET autocommit=0;
LOCK TABLES t1 WRITE, t2 READ, ...;... do something with tables t1 and t2 here ...
COMMIT;
UNLOCK TABLES;
When you call LOCK TABLES, InnoDB internally takes its own table lock, and MySQL takes its own table lock. InnoDB releases its internal table lock at the next commit, but for MySQL to release its table lock, you have to call UNLOCK TABLES. You should not have autocommit = 1, because then InnoDB releases its internal table lock immediately after the call of LOCK TABLES, and deadlocks can very easily happen. InnoDB does not acquire the internal table lock at all if autocommit = 1, to help old applications avoid unnecessary deadlocks.

--------------------------------------------------------------------------------
InnoDB uses automatic row-level locking. You can get deadlocks even in the case of transactions that just insert or delete a single row. That is because these operations are not really “atomic”; they automatically set locks on the (possibly several) index records of the row inserted or deleted.


Explicit locking may be necessary when a client needs to perform an operation that spans multiple statements that
must not be interrupted by other clients.
Explicit locking can improve performance for multiple statements executed as a group while the lock is in effect.


When accessing the auto-increment counter, InnoDB uses a special table-level AUTO-INC lock that it keeps to the end
of the current SQL statement, not to the end of the transaction.
The special lock release strategy was introduced to improve concurrency for inserts into a table containing an AUTO_INCREMENT column.
Nevertheless, two transactions cannot have the AUTO-INC lock on the same table simultaneously,
which can have a performance impact if the AUTO-INC lock is held for a long time. 








#####################################################################
MySQL binary and non-binary string data types

1. Non-binary string data type
* sequence of characters that have a character set and a collation

a. character set = set of characters supported
- determines how many bytes the storage of a single character needs
b. collation = used in string comparison
- determines the sorting order, if the string can be case-sensitive or case-insensitive etc.

SHOW CREATE TABLE TableName;
    `sId` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL
    
SHOW CHARACTER SET;
utf8mb4_unicode_ci = based on the Unicode standard for sorting and comparison, which sorts accurately in a very wide range of languages.
- case insensitive

The non-binary string types are:
* CHAR, VARCHAR, TEXT (and other variations of TEXT data types)


2. Binary string data type
* binary strings don’t have character sets and collations
* sequence of byte values --> case-sensitive (uppercase and lowercase have different byte values)

BINARY, VARBINARY, BLOB (and other variations of BLOB data types)



#####################################################################
Basic Locks mode

enum lock_mode { 
        LOCK_IS = 0,    /* intention shared */ 
        LOCK_IX,        /* intention exclusive */ 
        LOCK_S,         /* shared */ 
        LOCK_X,         /* exclusive */ 
        LOCK_AUTO_INC,  /* locks the auto-inc counter of a table 
                        in an exclusive mode */ 
        LOCK_NONE,      /* this is used elsewhere to note consistent read */ 
        LOCK_NUM = LOCK_NONE, /* number of lock modes */ 
        LOCK_NONE_UNSET = 255 
}; 

Transactions cannot be nested. 
This is a consequence of the implicit commit performed for any current
transaction when you issue a START TRANSACTION statement or one of its
synonyms.


A limitation on UPDATE and DELETE statements that use a subquery to
modify a single table is that the optimizer does not use semi-join or
materialization subquery optimizations. 
As a workaround, try rewriting them as multiple-table UPDATE and
DELETE statements that use a join rather than a subquery.

delete topic_message.* FROM topic_message INNER JOIN topic ON
(topic_message.topic_id = topic.topic_id) WHERE `topic`.`topic_name` =
'stage:keys&test.user.-1414636811#2&3' ;


DELETE locks all rows that are scanned in the query -> make sure you have index on right column



#####################################################################
data normalization = 
* there is no redundancy of data (all data is stored in only one place)
* data dependencies are logical (all related data items are stored together).

Traditional database design principles tell you that well-designed databases are always normalized.
