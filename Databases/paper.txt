1) How the data is retrieved?

2) Conditions for backup (server needs to be stop etc.)

3) How the data is sent and stored on the backup server



How to make a backup

**********************************
1. Copy the files from database directories

Order of operations:
a) lock tables with 'LOCK TABLES' command( a read lock -  this allows other clients to continue to query the tables)
b) close all open tables with FLUSH TABLES 
c) copy the files from database directories to backup location
(*.frm, *.MYD, *.MYI for MyISAM tables)

**********************************
2.  SQL-level backup

Using SELECT INTO ... OUTFILE 'file_name' statement
- writes the selected rows to a file
- user must have the FILE privilege to use this syntax. 
- 'file_name' cannot be an existing file


**********************************
3.Using MYSQLDUMP program
Creates a .sql file that contains SQL statements which will restore your database (tables structure, data etc);

- can be used to dump a database or a collection of databases for backup 
- can be used for transferring the data to another SQL server (not necessarily a MySQL server). 
- works for MyISAM and InnoDB tables
- can use LOCK TABLES statements
- doesn't require for server to stop 
- CPU intensive and slower
- works best for small and medium installations
- handles locking if you need it		

Back up a database:
mysqldump --opt backup > backup-file.sql -u root -p
Restore a database:

mysql backup < backup-file.sql  -u florin -p



**********************************
4. Using MYSQLHOTCOPY program
Copies files from database directories to backup location.

Connects to mysql, puts a lock on tables, close open tables and copies the .frm, .MYD. MYI files

- works ONLY for backing up MyISAM and ISAM tables
- it uses LOCK TABLES, FLUSH TABLES, and 'cp' or 'scp' to make a backup of a database quickly. 
- it is the fastest way to make a backup of the database or single tables, but it can be run only on the same machine where the database directories are located. 

- user must have access to 
	the files for the tables that you are backing up
	the SELECT privilege for those tables
	the RELOAD privilege (to be able to execute FLUSH TABLES).

Back up a database:
Restore a database: 
mysqlhotcopy db_name [/path/to/new_directory]


**********************************
5. Backing Up and Recovering an InnoDB Database

If you are able to shut down your MySQL server, you can make a binary backup that consists of all files used by InnoDB to manage its tables. Use the following procedure: 
	Shut down your MySQL server and make sure that it shuts down without errors. 
	Copy all your data files (ibdata files and .ibd files) into a safe place. 
	Copy all your ib_logfile files to a safe place. 
	Copy your my.cnf configuration file or files to a safe place. 
	Copy all the .frm files for your InnoDB tables to a safe place.

In addition to taking binary backups as just described, you should also regularly take dumps of your tables with mysqldump. 
(a binary file might be corrupted without you noticing it)



***********************************
6. Incremental backup

- using binary logging
- the binary log contains all statements which updated data
- running the server with the binary log enabled makes performance about 1% slower


Back up a database:
a)perform a full backup(mysqldump) at some point 
b)restart the server with "--log-bin" option; any changes that updated data will be stored in "binary logs" files.

Restore a database:
a) restore the original 'mysqldump' backup 
b) re-run the updates in the binary logs, using 'mysqlbinlog'


Each time it restarts, the MySQL server creates a new binary log file using the next number in the sequence. 
While the server is running, you can also tell it to close the current binary log file and begin a new one manually by issuing 
a FLUSH LOGS SQL statement or with a mysqladmin flush-logs command.



***********************************
7. Replication
- allows the databases on one MySQL server to be duplicated on another
- One server acts as the master, while one or more other servers act as slaves
Master Server - write updated to its binary logs
	      - logs are sent to Slave Servers
	      - when the SS connects to MS, catches up any update
	      
- robustness (slave serves as a backup)
- better response times for clients (splitting the load between masters and slaves - non-updating queries)
- backups can be made using a slave
 
Each Slave Server receives from the Master the saved updates that the Master has recorded in its binary log, 
so that the Slave can execute the same updates on its copy of the data.
Master has to enable binary logging
