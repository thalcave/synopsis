IDIOMS
	Named Constructor Idiom 					= ctors are private; use static functions that return an object
	Construct on First Use  					= wrap static object into a function: x().goBowling()
	Named Parameter Idiom   					= MyObj.readonly().createIfNOtexist() 
	Virtual Friend Function 					= friend fct should call a hidden virtual member function( to print a hierarchy of classes etc.)
	Virtual Constructor     					= creating an object whose type is only determined at run-time
									  pure virtual create(); Base *s = s1.create(); 
	NVI - NonVirtual interface Idiom				= virtual functions are private; interface is not virtual									  
	

1) Use this form:
	MyObj obj1 = myfunction();
instead of
	MyObj obj1; obj1 = myfunction();
	
Reason: function will not create a tmp object


2)Handle self-assignment:
	Fred& Fred::operator= (const Fred& f)
	{
		// This code gracefully (albeit implicitly) handles self assignment
		Wilma* tmp = new Wilma(*f.p_);   // It would be OK if an exception got thrown here
		delete p_;
		p_ = tmp;
		return *this;
		
		/* we could add a test: if(*this == f) return *this; but if self assignment occurrs only in 1% of cases, this would waste cycles 99% of the time */
	}


 -  prefer writing a common private function to share code between copying and copy assignment, if necessary; 
 	never use the trick of implementing copy assignment in terms of copy construction by using an explicit destructor followed by placement new
	 T::T( const T& other ) {
		do_copy( other );
	}
	T& T::operator=( const T& other ) {
		do_copy( other );
		return *this;
	}

	T& T::do_copy( const T& other ) {
		// the real work goes here
		// (presumably done exception-safely, but now it
		// can throw whereas throwing broke us before)
	}	
	
	
	
	
	
	

3)every constructor that takes a single argument, including constructors that take multiple arguments with default values 
should be explicit, unless you have a good reason to allow implicit


4)after find, check if iterator is not end
check if range is valid( first is not after last)

5) Dtors never throw exceptions

6)setters and getters should be inlined

7) when a class needs one of these: destructor, copy-constructor or assignment operator, it needs all three

8)reuse objects
string str1;			string str1;
{....}				{.....}
string str2;			str1=....


9)
Use scoped_ptr instead of auto_ptr to:
	signal that you intend RAII
	no intent to transfer ownership
	
	deleted after scope
	cannot be copied
	doesn't have release()


10) In a class, minimize the number of functions that directly manipulate an object
- define only operators that modify its object inside (+=, -= etc.)
use helper_classes for :
	- operators that simple produce a new value are defined outside (+, -)
	- serializing operators should be outside


11) Prefer a functor to a function
sort(v.begin(), v.end(), Compare()) 
	- functor's operator () is inlined --> zero function calls

 rather than

sort(v.begin(), v.end(), my_func);
	- compiler silently converts the function into a pointer to that function
	sort(v.begin(), v.end(), bool (*comp)(double, double));
	- indirect function call (through a function pointer)


12) 
- implementation methods (private, protected) should never call interface methods


13) use lazy-evaluation (computation is done only when needed)



14)static members should NOT be called from inlined functions

do not use static local variables in a function (not thread safe)
	use a class with one member function


15) if a class has a member:
	const T& m_t
	T& m_t
and a Ctor : Ctor(const T& t): make sure that Ctor doesn't receive a temporary object

Reason:  
  if a temporary object is passed to a constructor (by const reference) and bound to a member const reference,
  the lifetime of the temporary isn?t expanded and the reference becomes a dangling reference (with no diagnostic).
  
- should this be a design error? to have a const reference member

VIP: a temporary bound to a reference member in a constructor's ctor-initializer persists until constructor exits

when assigning an rvalue to a const reference, the compiler is allowed to make a copy of the rvalue.
A const& a = A(); //if A(A const&) is private, this is compilation error



16) Virtual Question #1: Publicity vs. Privacy?
http://www.gotw.ca/publications/mill18.htm

VIP: a private virtual function can be overriden by Derived class


Guideline #1: Prefer to make interfaces nonvirtual, using Template Method (Non-virtual interface Idiom)

class Base
{
public:
	virtual int func();	//specifies interface AND the customizable behaviour --> BAD, doing 2 things
}


separate the specification of interface from the specification of the implementation's customizable behavior:	
class Base
{
public:
	int func();	
private:
  // Customization is an implementation detail that may
  // or may not directly correspond to the interface.
	virtual int do_func();	
}

a) the base class : in complete control of its interface and policy
		    can enforce interface preconditions and postconditions, insert instrumentation, 
		    do any similar work all in a single convenient reusable place - the nonvirtual interface function
b) interface and implementation are easier to construct
c) the base class is now less fragile in the face of change

Overhead? No: inline func()

Guideline #2: Prefer to make virtual functions private.
	this lets the derived classes override the function to customize the behavior as needed, without further exposing the virtual functions 
	directly by making them callable by derived classes (as would be possible if the functions were just protected). 
	The point is that virtual functions exist to allow customization; unless they also need to be invoked directly from within derived classes' code, 
	there's no need to ever make them anything but private
	
Guideline #3: Only if derived classes need to invoke the base implementation of a virtual function, make the virtual function protected.	



Virtual Question #2: What About Base Class Destructors? Should base class destructors be virtual?

base class destructors should be virtual if you're going to delete polymorphically (i.e., delete via a pointer to base)!

Guideline #4: A base class destructor should be either public and virtual, or protected and nonvirtual.
a) you want to allow polymorphic deletion through a base pointer, in which case the destructor must be virtual and public
b) you don't, in which case the destructor should be nonvirtual and protected, the latter to prevent the unwanted usage.



17)  Never write an exception specification..except possibly an empty one (but if I were you I?d avoid even that)



18) when using virtual inheritance, the very first constructors to be executed are the virtual base classes.
