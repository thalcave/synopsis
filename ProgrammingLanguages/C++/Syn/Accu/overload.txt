1) Separating Interface and Implementation in C++

Problems:
1. Reducing Implementation Detail Exposed to the User
	- no support for separating the private member data -->  class encumbered with implementation noise 
	
2. Reducing physical coupling
	- additional header inclusions (.hpp includes <map> even if map is not used in public interface)
	- client code must be recompiled when changes happen
	
3. Allowing customised implementations
	- 

Solutions:
1. Cheshire cat (pimpl, handle/body idiom)
2. Delegation
	handing a task over to another part of the program (like aggregation)
3. Envelope/letter
4. interface class
	all member data is removed from class and all member functions are made pure virtual
	in implementation file, a derived class is defined
	a static create function that creates an instance of hidden derived :)
5. Non-virtual public interface
	all member data is removed from class, the interface becomes non-virtual that delegate to corresponding private pure virtual functions
	in implementation file, a derived class is defined that implements these member functions
	
	
when customisation of implementation needs to be supported the choice is between 
	Interface Class and Non-Virtual Public Interface. In this case we would prefer the simplicity of Interface Class 
	(unless we have a need for the public functions to do more work than forwarding - which leads us into the territory of TEMPLATE METHOD [GOF95])


2) C++ Interface classes - strenghtening encapsulation	
