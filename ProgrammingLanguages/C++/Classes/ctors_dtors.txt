1)initialization list warnings
- objects are constructed using declaration order from class, not from initialization list

class string
{
private:
	char *buff;
	int capacity;
public:
	explicit string(int size) :
	capacity(size), buff (new char [capacity]) {} //undefined behavior
};


2)RAII
	Resource Acquisition Is Initialisation
the most important part of RAII is that destructors release the resources, not that they're acquired in constructors:
* if an exception is thrown (and proper exception handler) --> only code executed in current scope is of destructors of objects declared in scope

A more precise acronym:
- RRID (Resource Reclamation Is Destruction)
- DIRR (Destruction Is Resource Reclamation)


3)when ctor/dtor are private --> no object could be created
when ctor/dtor are protected --> no object could be created directly (if we're deriving from class...)


4)when using private (or protected) inheritance, cannot convert a Derived* to a Base*


5)
hide-by-name semantics
	- in standard C++, a function in a base class will be hidden by a function with the same name in a derived class, 
		even if the derived class function does not have the same number or type of parameters. . 
		
hide-by-signature semantics
	- in reference types, a function in a base class can only be hidden by a function in a derived type if the name and parameter list are the same

6) Pure virtual destructor
any virtual func can be pure

- you must provide a function body for the pure virtual destructor
	- all destructors in a class hierarchy are always called --> that the compiler and linker enforce the existence of a function body for a pure virtual destructor
- you are not required to provide a definition of a pure virtual destructor in the derived class
	- the compiler automatically creates a destructor definition for every class if you don't create one

only benefit:
the pure virtual destructor does cause the base class to be abstract

GUIDELINE:
- any time you have a virtual function in a class, you should immediately add a virtual destructor (even if it does nothing)
