Functor = object that behaves like a function
	overload operator()

1. A functor might be smarter because it may have a state
2. A functor has a type --> it can be used in containers
3. A functor is usually faster than a pointer function
(direct call vs indirect call - when having a pointer to function, compiler does not know call destination until runtime)

Ex:
	for_each(list.begin(), list.end(), func);
	for_each assumes that func is something that can be called, not necessarily a function	
	
 - sorting criterion
 
reference counting =  technique of storing the number of references, pointers, or handles to a resource such as an object or block of memory
	typically used as a means of deallocating objects which are no longer referenced.
-------------------------------------------------------------
unary_function, binary_function:
	template<class Arg, class Res> struct unary_function
	{
		typedef Arg argument_type;
		typedef Res result_type;
	};


	template classes that provide standard names for the argument type and return types
Ex:
	class Func2 : public std::unary_function<double, void>
	{
	public:
		Func2() {};
		void operator()(const double& x)
	};	

makes code more explicitly


template <typename T, int VAL> 
T addValue(T& const x)

for_each(list.begin(), list.end(), addValue<int, 10>);


-------------------------------------------------------------
Predicates

	- function object that returns a bool
Ex:
	template<class 	T> struct logical_not: public unary_function<T, bool>{
		bool operator() (const T& x) const { return !x}; }
	template<class 	T> struct less: public binary_function<T, T, bool>
	{
		bool operator() (const T& x, const T& y) { return x < y; }
	}
compare 2 sequences:
	typedef list<int>::iterator LI;
	typedef vector<int>::iterator VI;
	pair<VI, LI> p1 = mismatch( vi.begin(), vi.end(), li.begin(), less<int>());
		mismatch applies its binary predicate to pairs of corrensponding elements until it fails

	equal_to, not_equal_to, greater, less, greater_equal, less_equal, 
	
Ex: 
	have a class MyClass; we want to use find_if algorithm; we don't want to find MyClass based on its complete value
	we use MyClass::name as the key; we write a predicate
	
	class MyClass_Eq : public unary_function<bool, MyClass>
	{
		public:
			MyClass(const string& name): name_(name) {};
			bool operator() (const MyClass& mc) const { return name_ == mc.name; }	
	};
	
-------------------------------------------------------------
Adapters: Binders, adapters, negaters
	when we need a predicate, we find that it's a minor variation of an existing one

binder 	
	allows a 2-argument function to be used as a single-argument one by binding an argument to a value
member function adapter	
	allows a member function to be used as an argument to algorithms
pointer to fct adapter
	allows a pointer to a function to be used as an argument to algorithms
negater
	allows us to express the opposite of a predicate		


Binders:
	less is useful and flexible but we want to compare an object to a fixed-value
	
	void f(list<int>& c)
	{
		list<int>::const_iterator p = find_if(c.begin(), c.end(), bind2nd(less<int>, 7));
	}

	bind1st - bind the first argument of a binary function
	bind2nd - bind the second arg of a binary function
	currying = technique of tranforming a function that takes several arguments into a fct that takes a single argument
			and returns a function that takes the remainder of args and returns result

Member function adapters:
	users want to invoke a member function in an algorithm
	mem_fun, mem_fun_ref
	
Negaters
	are related to binders in that they take an operation and produce a related operation of it
	not1 - negate unary predicate
	not2 - negate binary predicate		


-------------------------------------------------------------------
Function objects and callbacks



