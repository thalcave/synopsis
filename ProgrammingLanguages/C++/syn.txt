*********************************************************************************
Containers
1.
	- contiguous-memory 
		- vector, string
		- chunks of memory, multiple elements per chunk --> shift the elements
		- offers random acces iterators
	- node-based containers
		- one element per chunk
		- associative containers, list slist
		- offers bidirectional iterators
		
deque is not contiguous		
2.
	- sequence containers
		- vector, string, deque, list
		- support push_back(), push_front()
	- associative containers 
		- set, multiset, map, multimap
		- equal_range(), find()

Use hash_containers when we don't care if elements are ordered
	3. memory allocation

Use:
	vector - by default
	list - frequent insertions and deletions from the middle
	deque - insertions and deletions at both ends; deque frees resources of removed elements

Consider preferring deque by default in your programs, especially when the contained type is a class or struct and not a builtin type,


2. Container-independent code? NO

3. Copy must be unexpensive
when you add an object into a container, you add a copy of the object
when you get.....you get a copy
copy in, copy out - using copy constructor and copy assignment



Slicing problem = inserting into a base class container a derived class object
list<Base> b;
Derived d;
list.insert(d)

Solution = use pointers in container
list<Base*> b;
Derived *d;
list.insert(d);
to reduce problems ==> use smart_pointers in containers

FileMeta vect[100] ==> creates 100 FileMeta objects
vector<FileMeta> vect; vect.reserve(100) ==> only reserves


4. use container.empty() instead of container.size() == 0


5. use range member-functions instead of single-element fct( like insert)
 - whenever you have to replace to contents of a container, use assign()
 - use insert(location, data.start, data.end) instead of n * insert(location, data[i])
	1. unnecessary fct calls
	2. inefficiently moving the existing elements
	3. memory allocation
	
6. parse a file using iterators


7. when using containers of newed pointers, delete pointers before container is destroyed
- when container is destroyed, pointers remain; must delete them one by one
- string class has no virtual destructor --> don;t inherit this class

8. never create containers of auto_ptrs
-  When you copy an auto_ptr. ownership of the object pointed to by the auto_ptr is transferred to the copying auto_ptr. and the copied auto_ptr is set to NULL.
FileMeta* fm = new FileMeta();
auto_ptr a(fm);
auto_ptr b = a;		//a is NULL after this
when we sort a container, strange things can happen


9.erasing options
eliminate all objects that have a particular value:
	- contiguos-memory container : c.erase( remove(c.begin(),c.end(),1963), c.end() ) 
	- list : c.remove(1963)
	- associative containers : c.erase(1963)
	
To eliminate all objects in a container that satisfy a particular predicate:
	If the container is a vector, string, or deque, use the erase-remove_if idiom.
	If the container is a list, use list::remove_if.
	If the container is a standard associative container, use remove_copy_if and
	swap, or write a loop to walk the container elements, being sure to
	postincrement your iterator when you pass it to erase.

10. Allocators are weird



12. Thread safety
- multiple readers of the same container are safe
- multiple writers to different containers are safe





*********************************************************************************
Vectors and strings

14. Use reserve()
- when max size is exceeded:
	- allocate new blocks ( bigger memory)
	- copy all already existing elements
	- destroy objects in old memory
	- deallocate old memory
	- iterators are destroyed

size() - how many objects there are
capacity() - how many objects can store
resize() - change to n the number of elements that it holds( n is smaller, some objects will be destroyed; n is greater, some default objects will be added)
reserve() - change its capacity

TO avoid reallocation, use reserve()

15.
- different implementations of string

16.

17. Swap trick
Shrink-to-fit:
- vector<FileMeta> fm;	// initially, 100.000 FM; after that, only 1000 remains; get rid of the rest of the space
- vector<FileMeta>(fm).swap(fm)
	vector<FileMeta>(fm) - creates a tmp vector from fm with 1000 elements
	swap the contents	

18. Avoid using vector<bool> because it fails to satisfy the requirements for STL container
- requirement: if C is container of objects T,
		then T* p = &c[0] must compile
won't compile because vector<bool> is a pseudo-container that actually doesn't contain bool but a packed representation of bools designed to save space
- vector<bool> uses bitfields instead of bools, pointers to individual bitsets are forbidden

because reference to bitfields are forbidden as well, vector<bool>::operator[] 	returns an object that acts like a reference to bit: a proxy-object

use deque<bool>:
- STL container that really stores bools



*********************************************************************************
Associative containers

- they keep themselves sorted

Item 22. Avoid in-place key modification in set and multiset.


