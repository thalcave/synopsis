std::function
- STL template class that provides a very convenient wrapper to a simple function, to a functor or to a lambda expression

Example for executing a vector of functions
void execute(const vector<function<void ()>>& fs)
{
    for (auto& f : fs)
        f();
}

void plain_old_func()
{
    cout << "I'm an old plain function" << endl;
}

class functor
{
    public:
        void operator()() const
        {
            cout << "I'm a functor" << endl;
        }
};

int main()
{
    vector<function<void ()>> x;
    x.push_back(plain_old_func);

    functor functor_instance;
    x.push_back(functor_instance);
    x.push_back([] ()
    {
        cout << "HI, I'm a lambda expression" << endl;
    });

    execute(x);
}

--------------------------------------------------------


std::bind
- template function that returns a std::function object that binds a set of arguments to a function.
bind returns a new function object with a different prototype because all the parameters of the function were already specified.

Example:
- have a vector of functions with no arguments
    vector<function<void ()>> vector_of_functions;
- want to add a function which takes one arguments
    function <void ()> f = bind(show_text, "Bound function");
    vector_of_functions.push_back(f);

Placeholder:
 placeholder is an object that specifies the number of parameter in the bound function that will be used to enter this parameter. 
    auto f = bind(multiply, 5, _1);
    f(10) ---> f = multiply(5, 10)


