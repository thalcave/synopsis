1. auto for types
- careful with begin()/cbegin()
for (const auto& v : c)
{
}

can use auto x = type{ init }

- careful with pointers
auto ptr = new Pointer(); --> it will leak


2. constexpr


3. tuple - generalised version of the pair class.

4. std::unique_ptr

5. use range-based for loops
for (const auto& v : c)

6. use list initialization
std::vector<int> mem = {1,2,3};

7. nullptr

8. algorithms:
all_of(), any_of() and none_of()
is_sorted and is_sorted_until
minmax_element

copy_if(), copy_n()
iota() creates a range of sequentially increasing value

!!!careful with QHash.values() --> returns by value
std::any_of(hash.values().begin(), hash.values().end()) --> different lists --> begin and end do not match


9. enum class

10. std::move
v.push_back(std::move(str));

- careful: 'str' is invalid now


11. override and final
- override: it will give you an error if Derived is not overriding the function from Base
- final: it will give you an error if the method is overriden in derived class

12. use begin(container) instead of container.begin()
- more generic code


12. make_shared
auto sp = std::make_shared<int>(12);
    
* Constructs an object of type T and wraps it in a std::shared_ptr using args as the parameter list for the constructor of T.
* used to replace the construction std::shared_ptr<T>(new T(args...))
* single memory allocation, whereas std::shared_ptr<T>(new T(args...)) performs at least two memory allocations
* code such as 
    f(std::shared_ptr<int>(new int(42)), g())
can cause a memory leak if g() throws an exception because g() may be called after new int(42) and before the constructor of shared_ptr<int>
    