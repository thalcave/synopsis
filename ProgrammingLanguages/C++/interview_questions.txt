1) What is Opaque pointer (Cheshire Cat,Pimpl = private implementation, 
handle/body idiom) and its use

opaque pointer = datatype that hides its internal implementation using a 
pointer. This allows the implementation of the whole interface to change 
without the need to recompile the modules using it. 
This is important for providing binary compatibility through different 
versions of a shared library, for example.

Used heavily in QT, KDE.

2) How to make a class noncopyable?

declare private copy constructor and copy assignment operator
(one can derive from boost::noncopyable which actually uses the aforementioned
declarations)

3) What is Construct on First Use Idiom?

- wrap static object into a function
- instead of x.method(), use create_x().method()
- create_x() returns a static object, thus ensuring that x is used AFTER it 
was created
- prevent "static initialization order fiasco": 2 static objects x and y in 2 
separate source files; if y initialization depends on x, it may crash

4) Very easy question:
the difference between
        MyObj obj1 = myfunction();
and
        MyObj obj1; obj1 = myfunction();
a) copy constructor versus copy assignment operator
b) first version will not create a tmp object:

5) What is an explicit constructor and when must be used?
explicit ctor = simply constructor that cannot take part in an implicit 
conversion
every constructor that takes a single argument, including constructors that 
take multiple arguments with default values should be explicit, unless you 
have a good reason to allow implicit


6) Rule of three for a class
a rule of thumb that says that if a class has one of the following—destructor, 
copy constructor, assignment operator—it probably needs all three

7) Is there any difference between List x; and List x(); ?
List x ->declares an object of type List;
List x() -> declares a function x() returning a List;

8) Can one constructor of a class call another constructor of the same class 
to initialize the this object?
No. Inside a ctor you cannot call for a different ctor of the same class

9) In which order are the objects of a class constructed: using declaration 
order from class or initialization list?
- objects are constructed using declaration order from class, not from 
initialization list

An example of order initialization warning which may be dangerous?
class string
{
private:
        char *buff;             //buff will be constructed before capacity
        int capacity;
public:
        explicit string(int size) :
        capacity(size), buff (new char [capacity]) {} //undefined behavior
};

10) What is RAII and what's the most important part of it?
RAII = Resource Acquisition Is Initialisation
the most important part of RAII is that destructors release the resources, not 
that they're acquired in constructors.

A more precise acronym:
- RRID (Resource Reclamation Is Destruction)
- DIRR (Destruction Is Resource Reclamation)

11)Why am I getting an error after declaring a Foo object via Foo x(Bar()) ?
When the compiler sees Foo x(Bar()), it thinks that the Bar() part is 
declaring a non-member function         that returns a Bar object, so it thinks you 
are declaring the existence of a function called x that returns a Foo 
        and that takes as a single parameter of type "non-member function that takes 
nothing and returns a Bar."

use  Foo x = Foo(Bar());

12) Why an empty class doesn't have zero size?
to ensure that the addresses of two different objects will be different. For 
the same reason, "new" always returns pointers to distinct objects

13) Difference between  std::cout<<"\n" and std::cout<<std::endl?
Using std::endl flushes the output buffer after sending a '\n', which means 
std::endl is more expensive in performance

