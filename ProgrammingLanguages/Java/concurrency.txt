----------------------------------------------------------------------------------------------------------------------------------
Java 8 Concurrency Tutorial

1. Concurrency: Threads and Executors

a) Threads
task = code executed by the thread
* specified by implementing Runnable

  Runnable task = () -> {
           // do work
  };

  task.run();   // execute it on the main thread

  Thread thread = new Thread(task);
  thread.start();


b) Executors
ExecutorService = higher level replacement for working with threads directly.
* are capable of running asynchronous tasks (Runnable, Callable)
* typically manage a pool of threads, so we don`t have to create new threads manually.

  // use an executor with a thread pool of size one.
  ExecutorService executor = Executors.newSingleThreadExecutor();
  executor.submit(
        () -> {
            String threadName = Thread.currentThread().getName();
            System.out.println("Hello " + threadName);
        }
    );
* Executors have to be stopped explicitly, otherwise they keep listening for new tasks.
- shutdown() waits for currently running tasks to finish
- shutdownNow() interrupts all running tasks and shut the executor down immediately.

    try {
        System.out.println("attempt to shutdown executor");
        executor.shutdown();
        executor.awaitTermination(5, TimeUnit.SECONDS);
    }
    catch (InterruptedException e) {
        System.err.println("tasks interrupted");
    }
    finally {
        if (!executor.isTerminated()) {
            System.err.println("cancel non-finished tasks");
        }
        executor.shutdownNow();
        System.out.println("shutdown finished");
    }


c) Callables and Futures

Callable = functional interface that returns a value
 * supported by Executors (just like the Runnable)

   Callable<Integer> task = () -> {
       try {
           TimeUnit.SECONDS.sleep(1);
           return 123;
       }
       catch (InterruptedException e) {
           throw new IllegalStateException("task interrupted", e);
       }
   };

Future = result of an async computation
- special result used to retrieve the actual result at a later point in time

Since Executor.submit() doesn`t wait until the task completes, the executor service cannot return
the result of the callable directly. Instead the executor returns a special result of type Future,
which can be used to retrieve the actual result at a later point in time.

    ExecutorService executor = Executors.newFixedThreadPool(1);
    Future<Integer> future = executor.submit(task);
    System.out.println("future done? " + future.isDone());

    // this will block the current thread until the callable completes
    Integer result = future.get();

    System.out.println("future done? " + future.isDone());
    System.out.print("result: " + result);



Every non-terminated future will throw exceptions if you shutdown the executor:
    executor.shutdownNow();
    future.get(); // will throw exception
      
         
d) Timeouts
* specify maximum wait time
* throws TimeoutException
    future.get(10, TimeUnit.SECONDS);

e) InvokeAll
* Executors support batch submitting of multiple callables at once via invokeAll()
- accepts a collection of Callables
- returns a list of Futures

    ExecutorService executor = Executors.newWorkStealingPool();
    List<Callable<String>> callables = Arrays.asList(
                                                 () -> "task1",
                                                 () -> "task2",
                                                 () -> "task3");

    executor.invokeAll(callables)
        .stream()
        .map(future -> {
            try {
                return future.get();
            }
            catch (Exception e) {
                throw new IllegalStateException(e);
            }
        })
        .forEach(System.out::println);

f) InvokeAny
* Instead of returning future objects this method blocks until the first callable terminates and returns the result of that callable.  


g) Scheduled Executors

ScheduledExecutorService = capable of scheduling tasks to run either periodically or once after a certain amount of time has elapsed.
      
      ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
      Runnable task = () -> System.out.println("Scheduling: " + System.nanoTime());
      // run the task after an initial delay of 3 seconds
      ScheduledFuture<?> future = executor.schedule(task, 3, TimeUnit.SECONDS);

      // retrieve the remaining delay
      long remainingDelay = future.getDelay(TimeUnit.MILLISECONDS);

      int initialDelay = 0;
      int period = 1;
      // execute tasks at a fixed time rate (once every second)
      executor.scheduleAtFixedRate(task, initialDelay, period, TimeUnit.SECONDS);

* scheduleAtFixedRate() doesn`t take into account the actual duration of the task.
* scheduleWithFixedDelay() works just like the counterpart described above;
the difference is that the wait time period applies between the end of a task and the start of the next task


h) CompletableFuture
* a Future (result for async operation) that can be explicitly completed
* allows to complete a future when an event happened

#### Creation:
* create a CompletableFuture using its constructor:
    public CompletableFuture<String> ask() {
        final CompletableFuture<String> future = new CompletableFuture<>();
        //...
        return future;
    }
- client will block here:
     CompletableFuture completableFuture = ask();
     completableFuture.get(); // will block
- unblock all clients:
     future.complete("a string")

* create it using factory methods, specifying the mode (sync or async) and its task or process:
- CompletableFuture.runAsync() = takes a Runnable -> returns a CompletableFuture<Void> (because Runnable doesn`t return anything)
- CompletableFuture.supplyAsync() = takes a Supplier -> returns a CompletableFuture<T>
        final CompletableFuture<String> future = CompletableFuture.supplyAsync(new Supplier<String>() {
                @Override
                public String get() {
                //...long running...
                return "42";
             }
        }, executor);

        or:
        final CompletableFuture<String> future = CompletableFuture.supplyAsync(() -> longRunningTask(params), executor);

!!! supplyAsync() returns a new CompletableFuture that is asynchronously completed by a task running in the ForkJoinPool.commonPool()
with the value obtained by calling the given Supplier.

     
#### Getting results:
* Using the get() method:
        // wait forever until the CompletableFuture is completed or cancelled
        cf.get();
* Using the getNow(fallback) method:
        // if the result is not yet present, fallback is returned
        cf.getNow("fallback")
* Using the get(long amount, TimeUnit unit)
        // waits x time units and tries to return the computed value if available; if not, TimeoutException is thrown
        cf.get(3, TimeUnit.SECONDS)


#### Completing ad-hoc

* create a Completable that is not gonna end:
           CompletableFuture completableFutureToBeCompleted2 = CompletableFuture.supplyAsync( ( ) -> {
                             for( int i = 0; i < 10; i-- )
                             {
                                System.out.println( "i " + i );
                             }
                             return 10;
                  } );

* create a new CompletableFuture that is going to complete the first one:
  CompletableFuture completor = CompletableFuture.supplyAsync( ( ) -> {
	            System.out.println( "completing the other" );
                    completableFutureToBeCompleted2.complete( 222 );
	            return 10;
        } );

* retrieve the results:
  System.out.println( completor.get() );
  System.out.println( completableFutureToBeCompleted2.get() );

* CompletableFuture.complete() can only be called once, subsequent invocations are ignored
* CompletableFuture.completeExceptionally(ex) - signal failure by passing some exception
         - unlocks all waiting clients, but this time throwing an exception from get()

#### Joining
It is possible to join different CompletableFuture and use its results in future calculations using the methods thenApply() and thenCompose():
* run this function on a result, when it arrives
   // from String -> Integer -> Double
   CompletableFuture<String> f1 = //...
   CompletableFuture<Integer> f2 = f1.thenApply(Integer::parseInt);
   CompletableFuture<Double> f3 = f2.thenApply(r -> r * r * Math.PI);
* these transformations are neither executed immediately nor blocking;
  they are simply remembered and when original f1() completes they are executed for you.

Running code on completion (thenAccept/thenRun)

Combining two CompletableFuture together

   CompletableFuture completableFutureBigCompute = CompletableFuture.supplyAsync( ( ) -> {
                     // big computation
	             return "10";
                     } );

   CompletableFuture thenCompose = completableFutureBigCompute.thenCompose(CombiningCompletableFutures::continueWithVeryImportantThing);

   CompletableFuture<CompletableFuture> thenApply = completableFutureBigCompute.thenApply(CombiningCompletableFutures::continueWithSomethingElse);

   System.out.println( "thenCompose " + thenCompose.get() );
   System.out.println( "thenApply " + thenApply.get() ); // is already completed
   System.out.println( "thenApply " + thenApply.isDone() ); // is already completed

   CompletableFuture thenCompose2 = completableFutureBigCompute.thenCompose(CombiningCompletableFutures::continueWithVeryImportantThing );

   // difference between compose and apply: thenCompose uses the value of the source
   System.out.println( "thenCompose2 " + thenCompose2.get() ); 

####
#### 
         

2. Synchronization and Locks

a) Synchronized
Internally Java uses a so called monitor also known as monitor lock or intrinsic lock in order to manage synchronization.

    synchronized void incrementSync() {
        count = count + 1;
    }

The synchronized keyword is also available as a block statement:
    void incrementSync() {
        synchronized (this) {
            count = count + 1;
        }
    }


b) Locks

Locks support various methods for finer grained lock control thus are more expressive than implicit monitors.


