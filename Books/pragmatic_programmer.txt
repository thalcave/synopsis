kaizen = continuously making many small improvements

------------------------------------------------------------------------
Chapter 1. A Pragmatic Philosoph

* take responsibility
- provide options, don't make lame excuses

* don't live with broken windows: 
crack down on the small stuff in order to keep out the big stuff

* be a catalyst for change: (stone soup)
- easier to ask forgiveness than it is to get permission
* remember the big picture

great software today is better than perfect software tomorrow

* know when to stop from tinkering


Building your knowledge portfolio
* invest regularly
- learn at least one new language every year
- read a technical book each quarter
- experiment with different environments

* diversify
* manage risks

* critical thinking: beware of zealots who insist that their dogma
provides the _only_ answer

* communicate:
- know what you want to say
- know your audience

------------------------------------------------------------------------
Chapter 2. A Pragmatic Approach


DRY principle
* reserve the comments for high-level explanations
* generate tests from documentation
* generate classes from metadata files, from DB schema

"if it isn't easy, people won't do it"

Orthogonality
* components are isolated, you can change one without 
worrying about the rest

orthogonal teams: the larger the number of people involved in
discussing changes, the less orthogonal the group

Orthogonality test: if I do a change, how many modules are affected?
The answer should be "one".


Reversibility
* there are no final decisions
* have a flexible architecture


The trace bullet approach is to get something working right away
* Tracer code is not disposable: you write it for keeps. It contains all the error checking that any piece of production code has. 
* It simply is not fully functional.
Prototype:
* you must make it very clear that this code is disposable


------------------------------------------------------------------------
Chapter 3. The Basic Tools

* keep knowledge in plain text
Unix is designed around the philosophy of small, sharp tools,
each doing one thing well. Databases are kept as plain text files.

* use the power of command shells
* pick a powerful editor and learn it well

Debugging:
* fix the problem, not the blame
* don't panic
* Don’t waste a single neuron on the train of thought that begins “but that can’t happen” because
quite clearly it can, and has.
* it is much more likely that the bug exists in your application code, than in kernel, libraries etc.
* determine why this failure wasn’t caught earlier: amend tests
* are there any other places susceptible to this same bug?

rubber ducking = explain the problem to someone else

Debugging Checklist
* Is the problem being reported a direct result of the underlying bug,
  or merely a symptom?
* Is the bug really in the compiler? Is it in the OS? Or is it in your code?
* If you explained this problem in detail to a coworker, what would you say?
* If the suspect code passes its unit tests, are the tests complete enough? 
  What happens if you run the unit test with this data?

------------------------------------------------------------------------
Chapter 4. Pragmatic Paranoia

class invariant = a class ensures that this condition is always true

contract between a routine and a caller: if all preconditions are met by the caller,
the routine shall guarantee that all postconditions and invariants will be true when it completes.

a subclass should not accept a weaker contract than the base class

banana problem = I don't know when to stop
fencepost problem = count the fenceposts or the spaces between them
off by one error

loop invariant = valid before the iteration, and on each iteration
ex: max = Math.max(array[0:i-1])

coding defensively 

Tips:
* Crash Early

Assertive programming
* assertions check for things that should never happen
* exceptions should be reserved for unexpected events: a program should still
run if I remove all the exceptions handlers


------------------------------------------------------------------------
Chapter 5. Bend, or Break

Law of Demeter: minimize coupling between modules

------------------------------------------------------------------------
Chapter 6. While you are coding

Avoid programming by coincidence, relying on luck and accidental successes:
* understand why the code works in the first place
* understand the application you're building
* don’t let existing code dictate future code



Testing against Contract
Desing to Test: When you design a module, or even a single routine, you should design
both its contract and the code to test that contract.

Writing Unit Tests:
* for small projects, they can be embedded in the module itself
* for larger project, each test into a subdirectory

Tips:
Test Your Software, or Your Users Will
Don’t Use Wizard Code You Don’t Understand


------------------------------------------------------------------------
Chapter 7. Before the Project

Tips:
Don’t Gather Requirements - Dig for Them: they’re buried deep beneath layers of assumptions, misconceptions, and politics.
It’s important to discover the underlying reason why users do a particular thing, rather than just the way they currently do it.

Tips:
Work with a User to Think Like a User


Cockburn use case template


Danger: overspecifying
Requirements are not architecture. Requirements are not design, nor are they the user interface. Requirements are need.

Track the requirements to understand the feature bloat

Tip: Create and maintain a project glossary

Tip: identify the most restrictive constraints first, and fit the remaining constraints within them.


Starting a new project:
* Listen to Nagging Doubts—Start When You’re Ready
* start prototyping

Program specification: 
* is the process of taking a requirement and reducing it down to the point where a programmer’s skill can take over.
* a record for future generations of programmers who will be maintaining and enhancing the code
* an agreement with the user

Some Things Are Better Done than Described

Distrust environments where requirements are gathered, specifications are written, and then coding starts, all in isolation.


------------------------------------------------------------------------
Chapter 8. Pragmatic Projects

No Broken Windows
Don't Repeat Yourself

Tip: Don’t Use Manual Procedures

Ruthless testing: Test Early. Test Often. Test Automatically.

What to Test:
* Unit testing
* Integration testing
* Validation and verification: is it what the users need?
* Resource exhaustion, errors, and recovery
* Performance testing
* Usability testing: It is performed with real users, under real environmental conditions.

How to Test:
Test Data: either real, or synthetic. We need both.
Test State Coverage, Not Code Coverage

When to Test:
As soon as any production code exists, it needs to be tested.