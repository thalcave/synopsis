------------------------------------------
P3 Input file with 4 billion integers; algorithm to generate an integer which is not contained in the file

a. 1 GB of memory available
b. 10 MB of memory available

integer = 16 bits --> 4.000.000.000 * 2 bytes --> 8 GB file
range: 0..65535

integer = 32 bits --> 16 GB file
range 0 - 4.294.000.000

Solution:

1.
integer = 2 bytes --> range: 0-65535 --> array with 65k entries
pass through file:
* a[current number]++
pass through array, find first 0 element
space: 65k * 2 bytes = 130k bytes = 130 KB

integer = 4 bytes --> array = 16 GB of memory, not good
array of bits --> 4.294.000.000 range = 512 MB --> OK for a)

for b):
find max, min
increment max/decrement min

b) 10 MB of memory available

10 MB = 10240 KB = 10000000 bytes = 80.000.000 bits
array of 50.000.000 bits

divide the integers in blocks of 10000 --> 400.000 blocks --> array with 400.000 integers = 1.5 MB
(divide the integer range in blocks of 1.048.576 --> 4096 blocks --> array with 4096 integers)

1st pass
array[0] = count how many numbers from 0..10000 are
array[1] = count how many numbers from 10.000..20000 are
array[x] = count how many numbers from x*10.000 ..x*10.000+10.000 are

look for an array element which has a value smaller than 10.000
2nd pass
take this array element and count the numbers agains

------------------------------------------
P4 An array with all numbers from 1 to N (N is max. 32000)
With only 4KB of memory available, print all duplicate entries in array

Solution:
array of bits, 32K elements --> 3.9 KB


