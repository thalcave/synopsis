-------------------------------------------------------------------------
P1 2 sorted arrays, A and B; A has enough space at the end to hold B
merge B in A in sorted order

- merge A and B from the back

void merge(vector A, vector B)
{
	cpos = A.size() - 1;	
	idxA = index of last element from A
	idxB = B.size() - 1;
	
	while (idxA>=0 && idxB>=0)
	{
		if (A[idxA] > B[idxB])
		{
			A[cpos] = B[idxB];
			--idxB;
		}
		else
		{
			A[cpos] = A[idxA];
			--idxA;
		}
		--cpos;
	}
	
	while (idxB >=0)
	{
		A[cpos] = B[idxB];
		--cpos;
		--idxB;
	}
}

-------------------------------------------------------------------------
P2 sort an array of strings so that all anagrams are next to each other

Solution:
implement a comparator which sorts the strings and then compares them

struct CompareStrings
{
	bool operator()(std::string const& s1, std::string const& s2)
	{
		return std::sort(s1.begin(), s1.end()) < std::sort(s2.begin(), s2.end());
	}
}

-------------------------------------------------------------------------
P3 sorted array of strings interspersed with empty strings; find a given strings

Solution: do binary search, if empty string is found, move to next one, until a valid string is found

-------------------------------------------------------------------------
P4 matrix, each row/column is sorted, find an elemen in it


-------------------------------------------------------------------------
P5 2GB file, one string per line; which algorithm would you use to sort it?

Solution:
- merge sort takes O(n logn) and O(n) space complexity, so it's not useful
Use external sorting:
* divide file in 10 regions
* sort each region in memory, write it
* merge regions:

-------------------------------------------------------------------------
P6 Find and maintain the median value as new values are generated

Solution: use 2 heaps: a Max and a Min one, with following restraints:

1. numbers from Max-heap are smaller than numbers from Min-heaps
2. size(Max-heap) is equal to or 1 more than size(Min-heap):
	if N is even --> size(Max-heap) = size(Min-heap) = N/2
	if N is odd --> size(Max-heap) = N/2 + 1 size(Min-heap) = N/2

2 methods: insert(elem)	and getMedian()
insert():
- insert to Max-heap
- if total_no is even before insertion --> OK
- if total_no is odd before insertion --> Max-heap has N+2 elems and Min-heap has N elem --> Restraint 2 is violated:
	pop elem from Max-heap
	insert popped elem in Min-Heap
- if inserted elem is less than MinHeap->root --> OK
- if inserted elem is bigger than MinHeap->root:
	exchange these elements: pop root of min-heap, insert it into max-heap
				 pop root of max-heap, insert it into min-heap

				 
-------------------------------------------------------------------------
P7 Search if 2 sets are disjointed

size(S1) = N
size(S2) = M

N > M

a. sort S1 --> O(n logn)
for each s in S2		--> O(m)
	binary_search(S1, s)	--> O(logn)
O(n logn) + m * O(logn) = O((m+n) * logn)

b. Sort S2 --> O(m log m)
for each s in S1
	binary_search(S2, s)
O(m logn) + n * O(log m) = O( (m+n) * log m)



-------------------------------------------------------------------------
P8 Give an efficient algorithm to find the second-largest key among n keys. You can do better than 2n âˆ’ 3 comparisons. 

compare first 3 elements, get rid of min
Repeat this ( n - 2 ) times until we are done with all elements. Since it only takes at most 2 comparison to find the smallest element out of three, the total would be 2(n-2) = 2n-4 < 2n-3

compare a0, a1, a2, remove min --> (x, y)
compare x, y, a3

x, y = remove_min(a0, a1, a2)	--> 2 comparisons
for i = 3 to n
	x, y = remove_min(x, y, ai)

(n- 3) * 2 + 2 comparisons = 2n -4 comparisons


-------------------------------------------------------------------------
P9 Sort 1Mio array of integers

quicksort --> O(n * logn)
radix sort --> O( k * n), with k = 10 (number of digits)


-------------------------------------------------------------------------
P10 Sort an array of 0 and 1, most efficient way

last = n -1	//index where 1's start
idx = 0

while idx < last
	if a[idx] == 1
		swap(a[idx], a[last])
		--last
	else
		++idx
		
		
-------------------------------------------------------------------------
P10 Sort an array of 0, 1 and 2 most efficient way
Solution: keep indexes
		where 0 ends
		where 2 starts
		
idx_0 = -1
idx_2 = n
idx = 0

while idx < idx2

	if a[idx] == 1	//do nothing
		++idx
		continue

	if a[idx] == 2
		swap(a[idx], a[idx2])
		--idx2
	else
		++idx_0
		swap(a[idx], a[idx_0])
		++idx

