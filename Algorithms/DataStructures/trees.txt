graph data structure = a finite (and possibly mutable) set of ordered pairs (called edges or arcs) of certain entities called nodes or vertices.

adjacency matrix (can be directed/weighted etc.):
	A	B 	C
A	0	1	0
B	1	0	1
C	0	1	0

adjacency list:
A: B
B: A, C
C: B


----------------------------------------------------------------------
Binary Search Tree (BST) = a node-based binary tree data structure which has the following properties:
* The left subtree of a node contains only nodes with keys less than the node's key.
* The right subtree of a node contains only nodes with keys greater than the node's key.
* The left and right subtree must each also be a binary search tree.
* There must be no duplicate nodes.


- if the tree is created via insertions, it may be unbalanced (e.g if we add numbers already sorted: 1 2 3 4 5)
create a perfectly-balanced tree:
* sort input values
* start from middle (like binary_search), do recursions etc.

		Avg		W
Space		O(n)		O(n)
Search		O(log n)	O(n)
Insert		O(log n)	O(n)
Delete		O(log n)	O(n)



----------------------------------------------------------------------
Red-black tree

In addition to the requirements imposed on a binary search trees, with redâ€“black trees:
* A node is either red or black.
* The root is black
* All leaves are black. (All leaves are same color as the root.)
* Every red node must have two black child nodes.
* Every path from a given node to any of its descendant leaves contains the same number of black nodes.

		Avg		W
Space		O(n)		O(n)
Search		O(log n)	O(log n)
Insert		O(log n)	O(log n)
Delete		O(log n)	O(log n)

Usage:
* CFQ


----------------------------------------------------------------------
B-tree

* generalization of BST:a node can have more than two children
* all leaves are at the same level

		Avg		W
Space		O(n)		O(n)
Search		O(log n)	O(log n)
Insert		O(log n)	O(log n)
Delete		O(log n)	O(log n)


Usage:
* the B-tree is optimized for systems that read and write large blocks of data. It is commonly used in databases and filesystems.



----------------------------------------------------------------------
Binary Heap is a binary tree with 2 additional constraints:
* complete (all levels of the tree, except possible the last one, are fully filled)
* all nodes are greater than (maxheap)|less than (minheap) each of its children

Creation:
a. successive  insertions --> n * O(logn) = O(n * logn)
b. using a binary tree --> O(n)
put elements in a binary tree
start from lowest level
heapify

		Avg		W
Space		O(n)		O(n)
Search		n		n
Insert		O(log n)	O(log n)
Delete		O(log n)	O(log n)

commonly implemented with an array:
* for each a[i]:
	- children are at a[2*i+1], a[2*i+2]
	- its parent is floor(a[(i-1/2)])

Operations:
a. insert (heapify-up):	O(logn)
1 add element at bottom level
2 compare added elem with parent; if correct order, stop
3 swap element with parent and go to #2

b. delete (heapify-down): O(logn)
1 replace root with last element
2 compare new root with its children; if correct order, stop
3 swap root with on of its children (smaller for min-heap, greater for max-heap) and go to #2

----------------------------------------------------------------------
Trie:
- each node holds a char
- a word is completed when reaching a leaf

For k-length word:
Insertion: O(k)
Searching: O(k)

struct Node
{
	char c;
	bool is_leaf;
	vector<Node*> children;
}


Suffix arrays:
- efficient searching of large text
* array containing all the pointers to the text suffixes sorted in lexicographical (alphabetical) order. 
* each suffix is a string starting at a certain poinsition in the text and ending at the end of the text
Searching a text can be performed by binary search using the suffix array.





----------------------------------------------------------------------
